%HW 5 PROBLEM 4-A

%Steps to design filter using method 2:

%  1) Start with continuous H(f):

%  H(f) = j2pif for 0 <= f <= 0.4fs, 0 for 0.45fs <= f <= 0.5fs, 
%  H(f) = -j16pi(f - 0.45fs) for 0.4fs < f < 0.45fs

%  fs = 2048, so fs/2 = 1024.
%  Ng = 256

%  set up frequency vector to be spaced at fs/Ng

fs = 2048;
Ng = 256;
df = fs/Ng;

f = 0: df : fs/2; %vector for f until fs/2

%  set up continuous frequency response, sample every df from 0 to fs/2.
%  This is already band limited as the H(f) doesn't have any values beyond
%  fs/2. 

Hf = zeros(1, length(f)); %initialize H(f) to 0 - will populate vector with for loop below

for x = 1:length(f)
    if f(x) >=0 && f(x) <= 0.4 * fs
        Hf(x) = 1i * 2 * pi * f(x);
    end
    if f(x) > 0.4 * fs && f(x) < 0.45 * fs
        Hf(x) = -1i * 16 * pi*(f(x) - 0.45*fs);
    end
    %  rest of vector is already initialized to 0 and should stay that way
    %  based on H(f)'s continuous response. 
end

%  Invoke complex conjugate symmetry around fs/2

Hf = [Hf, flip(conj(Hf(1:length(Hf) -1)))]; 
Hf = Hf(1:length(Hf) - 1); %complete complex conjugate symmetry around fs = 1024 and 
% ensure that last value of Hf matches up with fs = 2040, one df less than
% fs = 2048. 
f = 0 : df : fs - df;

figure(2)
sgtitle("Intermediate processing steps to generate hn")

subplot(3,1,1)
plot(f, imag(Hf)) %Hf with complex conjugate symmetry. Manually checked
title("f, imag(Hf))")
xlabel("Frequency - Hz")
ylabel("Frequency Response")
%  that the imaginary values are not there and there is complex conjugate
%  symmetry. 


%  IFFT the spectrum (Hf) to get the impulse response.

hn_orig = ifft(Hf); 

delta = 1/fs; %delta is for creating the time vector now that we have done the ifft and got the impulse response.

N = length(hn_orig); %N is also to assist in creating the time vector

t_hn_orig = 0: delta: N*delta - delta; %time vector for time domain (for plotting hn before it is rearranged)

subplot(3,1,2)
plot(t_hn_orig, hn_orig)%IFFT of Hf result. 
title("t, hn - impulse response NOT re-arranged")
xlabel("Time - sec")
ylabel("Response")

%  Re-arrange impulse response to get the odd symmetry. 

%hn_rearr = [hn_orig(N/2 : N), hn_orig(1:((N/2) -1))]; ignore- debugging
%hn_rearr = [hn_orig(N/2 -1:N), hn_orig(1:(N/2) - 2)]; ignore - debugging
hn_rearr = [hn_orig(N/2 + 1 : N), hn_orig(1: (N/2))];

t_hn_rearr = (-N/2 * delta): delta: ((N/2) - 1) * delta; %t vector for rearrangement
subplot(3,1,3)
plot(t_hn_rearr, hn_rearr) % rearranged imupulse response with odd symmetry! 
title("t, hn - impulse response with odd symmetry - REARRANGED")
xlabel("Time - sec")
ylabel("Response")


%-------------------------------------------------------------------------%
%HW 5 - Problem 4-B
%use myImpulseResponse function to plot the impulse response, the pole zero
%map, and details of the frequency response.
figure(1)
[func_freq_vec, Gsf] = myImpulseResponseAnalysis(hn_rearr, t_hn_rearr(1), fs);
subplot(2,2,3)
hold on

%superimpose 2pif on the frequency response magnitude
plot(f, abs(Hf))
legend('Designed filter', '|j2pif|')
legend('Location','best')
hold off


%Find error between designed filter and j2pif over the range 0 <= f <=0.4fs
pos = max(find(func_freq_vec < fs*0.4)); %use frequency vector from
%  the designed filter (freq vec is called "func_freq_vec", as the previous 
%  frequency vector for continuous H(f) at the beginning of the problem
%  does not have enough resolution to find the error at every point on the
%  designed filter. Also, find the end freq position for where we want to
%  do our error analysis, which is until 0.4*fs. 
error = abs(Gsf(1:pos)) - abs(1i*2*pi*func_freq_vec(1:pos)); %find error 
%  between continous H(f) and designed filter (Gsf - output from
%  myImpulseResponseAnalysis.m) in bound of 0 to 0.4fs.

%  plot error over frequency
figure(4)
plot(func_freq_vec(1:pos), abs(error))
title("Error between Design and 2*pi*f between 0 - 0.4fs")
xlabel("Frequency - Hz")
ylabel("Error")
disp("Max error is:")
max_error = max(abs(error))
%max_index_for_error = 0.4 * fs;
% Find and print largest error

%-------------------------------------------------------------------------%

%Problem 4-c
%  Use mydiscreteconv.m to convolve 2 sequences in time 
%  via the frequency domain

t = 0:delta:1;
xn = 5 * sin(2*pi*600*t);

%  Compare the filter output with dx/dt =
%  6000*pi*cos(2*pi*600*t) sampled at fs=2048 for 1 s starting at t = 0. 

t1 = 0: delta : 1;

dxdt = 6000*pi*cos(2*pi*600*t1);

Ny = length(xn) + length(hn_rearr) -1;

[yn] = mydiscreteconv(xn, hn_rearr, fs, Ny);

figure(3)
subplot(2,1,1)
plot(t1, dxdt)
sgtitle("Ideal differentiator result and Conv result")
title("Ideal Differentiator - 6000pi*cos(2pi600t)")
xlabel("Time - sec")
ylabel("Response")

%time vector for convolution output

t_conv = (0 : delta : length(yn) * delta - delta) + (t1(1) + t_hn_rearr(1));
%adjust time vector for start of xn + start of hn, which is 0 + -.0625
hold on
plot(t_conv, yn)
hold off
title("Convolution Result")
xlabel("Time - sec")
ylabel("Output response")
legend('dx/dt', 'conv output')

subplot(2,1,2)
plot(t, xn)
hold on
plot(t_hn_rearr, hn_rearr)
title("xn and hn input and impulse for convolution")
xlabel("Time - sec")
ylabel("Re
legend('xn - input','hn - impulse response')
hold off













